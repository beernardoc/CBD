// NMEC: 105926


// 1. Liste todos os documentos da coleção.

db.restaurants.find()


// 2. Apresente os campos restaurant_id, nome, localidade e gastronomia para todos os documentos da coleção.

db.restaurants.find({}, { restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1 })
// O primeiro campo {} significa que todos os documentos serão considerados, e o segundo onde tem 1 significa os atributos a serem apresentados (poderia colocar 0 para os que nao queria)


// 3. Apresente os campos restaurant_id, nome, localidade e código postal (zipcode), masexclua o campo _id de todos os documentos da coleção.

db.restaurants.find({}, {_id: 0,  restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1 })


// 4. Indique o total de restaurantes localizados no Bronx.

db.restaurants.find({localidade: "Bronx"}).count()


// 5. Apresente os primeiros 15 restaurantes localizados no Bronx, ordenados por ordem crescente de nome.

db.restaurants.find({ localidade: "Bronx" }).sort({ nome: 1 }).limit(15)
// para decrescente seria -1


// 6. Liste todos os restaurantes que tenham pelo menos um score superior a 85.

db.restaurants.find({ "grades.score": { $gt: 85 } })
//o campo gt significa greater than e filtra o campo grades.score 


// 7. Encontre os restaurantes que obtiveram uma ou mais pontuações (score) entre[80 e 100].

db.restaurants.find({ "grades": { $elemMatch: { "score": { $gte: 80, $lte: 100 } } } })
// $elemMatch é usado para verificar se pelo menos um. $gte (>=) e $lte (<=)


// 8. Indique os restaurantes com latitude inferior a -95,7.

db.restaurants.find({ "address.coord.0": {$lt: -95.7}})


// 9. Indique os restaurantes que não têm gastronomia "American", tiveram uma (ou mais) pontuação superior a 70 e estão numa latitude inferior a -65.

db.restaurants.find({ gastronomia: { $ne: "American" }, "grades.score": { $gt: 70 }, "address.coord.0": { $lt: -65 }})
// posso fazer um agrupamento de requisitos com a mesma lógica de um AND


// 10. Liste o restaurant_id, o nome, a localidade e gastronomia dos restaurantes cujo nome começam por "Wil".

db.restaurants.find({ nome: /^Wil/ }, { restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1 })
// Caracter ^ indica que a palavra a ser pesquisada inicia com o parametro a seguir (se a busca fosse palavras que terminam com wil seria $)


// 11. Liste o nome, a localidade e a gastronomia dos restaurantes que pertencem ao Bronx e cuja gastronomia é do tipo "American" ou "Chinese".

db.restaurants.find({ localidade: "Bronx", $or: [ { gastronomia: "American" }, { gastronomia: "Chinese" }] }, { nome: 1, localidade: 1, gastronomia: 1 })
// Diferente de quando são requisitos acumulados (and), quando temos o OR indicamos com o $or e passamos o campo e a opção. [ campo: opção ]
// os campos a serem mostrado, que são indicados com o 1, vêm no final

//ou

db.restaurants.find({ localidade: "Bronx", gastronomia: {$in: ["American","Chinese"]}},{ nome: 1, localidade: 1, gastronomia: 1 })
// utilizando o conjunto das possibilidades e a tag $in


// 12. Liste o restaurant_id, o nome, a localidade e a gastronomia dos restaurantes localizados em "Staten Island", "Queens", ou "Brooklyn".

db.restaurants.find({ localidade: { $in: ["Staten Island", "Queens", "Brooklyn"] } }, { restaurant_id: 1, nome: 1, localidade: 1, gastronomia: 1 })
// como se criasse uma lista das opções antes


// 13. Liste o nome, a localidade, o score e gastronomia dos restaurantes que alcançaram sempre pontuações inferiores ou igual a 3.

db.restaurants.find({ "grades.score": {$not: {$gt: 3}}},{_id: 0, nome:1, localidade: 1, gastronomia:1})
// note que !$gt é o mesmo que <=


// 14. Liste o nome e as avaliações dos restaurantes que obtiveram uma avaliação com um grade "A", um score 10 na data "2014-08-11T00: 00: 00Z" (ISODATE).

db.restaurants.find( { "grades.grade": "A", "grades.score": 10, "grades.date": ISODate("2014-08-11T00:00:00Z") }, { _id: 0, nome: 1, "grades.grade": 1 } )
// isoDate é um formato de data para o mongoDB


// 15. Liste o restaurant_id, o nome e os score dos restaurantes nos quais a segunda avaliação foi grade "A" e ocorreu em ISODATE "2014-08-11T00: 00: 00Z".

db.restaurants.find( { "grades.1.grade": "A", "grades.1.date": ISODate("2014-08-11T00:00:00Z") }, { _id: 0, restaurant_id: 1, nome: 1, "grades.score": 1 } )
// note que grades.1. segue a lógica de listas na programação e indica o segundo elemento da lista


// 16. Liste o restaurant_id, o nome, o endereço (address) e as coordenadas geográficas (coord) dos restaurantes onde o 2º elemento da matriz de coordenadas tem um valor superior a 42 e inferior ou igual a 52.

db.restaurants.find( { "address.coord.1": { $gt: 42, $lte: 52 } }, { _id: 0, restaurant_id: 1, nome: 1, address: 1 } )
// note que o and pode ser feito com { $gt: 42, $lte: 52 }


// 17. Liste nome, gastronomia e localidade de todos os restaurantes ordenando por ordem crescente da gastronomia e, em segundo, por ordem decrescente de localidade.

db.restaurants.find({}, { _id: 0, nome: 1, gastronomia: 1, localidade: 1 }).sort({ gastronomia: 1, localidade: -1 })


// 18. Liste nome, localidade, grade e gastronomia de todos os restaurantes localizados em Brooklyn que não incluem gastronomia "American" e obtiveram uma classificação (grade) "A". Deve apresentá-los por ordem decrescente de gastronomia.

db.restaurants.find({ localidade: "Brooklyn", gastronomia: { $ne: "American" }, "grades.grade": "A" }, { _id: 0, nome: 1, localidade: 1, gastronomia: 1, "grades.grade": 1 }).sort({ gastronomia: -1 })
// .sort() sempre no final


// 19. Indique o número total de avaliações (numGrades) na coleção.

db.restaurants.aggregate([{$group : {_id: '$localidade', count : {$sum : 1}} }])
// o aggregate é uma função que permite fazer operações de agregação, neste caso o group que permite agrupar por um campo e fazer uma operação de soma (count)


// 20. Apresente o nome e número de avaliações (numGrades) dos 3 restaurante com mais avaliações.

db.restaurants.aggregate([ { $project: { nome: 1, numGrades: { $size: "$grades" } } }, { $sort: { numGrades: -1 } }, { $limit: 3 }] )
// o project cria um novo campo e atribui a ele o size de .grades


// 21. Apresente o número total de avaliações (numGrades) em cada dia da semana.

db.restaurants.aggregate([ { $unwind: "$grades" }, { $group: { _id: { $dayOfWeek: "$grades.date" }, numGrades: { $sum: 1 } } } ])
// o unwind desagrega a lista de grades e o group agrupa por dia da semana e soma 1


// 22. Conte o total de restaurante existentes em cada localidade.

db.restaurants.aggregate([ { $group: { _id: "$localidade", count: { $sum: 1 } } } ])


// 23. Indique os restaurantes que têm gastronomia "Portuguese", o somatório de score é superior a 50 e estão numa latitude inferior a -60.

db.restaurants.aggregate([{ $addFields: {total_score : {$sum : '$grades.score'} }}, { $match : {total_score : {$gt: 50}, gastronomia: 'Portuguese', 'address.coord.0': {$lt: -60}}}])


// 24. Apresente o número de gastronomias diferentes na rua "Fifth Avenue"

db.restaurants.aggregate([{$match: {'address.rua': 'Fifth Avenue'}}, {$group: {_id: '$gastronomia', count: {$sum: 1}}}])


// 25. Apresente o nome e o score médio (avgScore) e número de avaliações (numGrades) dos restaurantes com score médio superior a 30 desde 1-Jan-2014.

db.restaurants.aggregate([{$match: {'grades.date': {$gte: ISODate('2014-01-01T00:00:00Z')}, 'grades.score': {$gt: 30}}}, {$addFields: {avgScore: {$avg: '$grades.score'}, numGrades: {$size: '$grades'}}}, {$project: {nome: 1, avgScore: 1, numGrades: 1}}])
// o project é para mostrar apenas os campos que queremos


// 26. Apresente o nome e a localidade dos restaurantes localizados em "Manhattan" que possuem pelo menos uma avaliação com um score inferior a 50.

db.restaurants.find({ localidade: "Manhattan", "grades.score": { $lt: 50 } }, { nome: 1, localidade: 1 })

// 27. Conte quantos restaurantes possuem o nome que começa com a letra "S" e estão localizados no "Brooklyn".

db.restaurants.find({ nome: /^S/, localidade: "Brooklyn" }).count()

// 28. Liste os restaurantes localizados em "Queens" que possuem gastronomia "Chinese" e uma classificação (grade) "B" ou superior, ordenando por ordem crescente de nome.

db.restaurants.find({ localidade: "Queens", gastronomia: "Chinese", "grades.grade": { $in: ["A", "B"] } }).sort({ nome: 1 })

// 29. restaurantes que não receberam avaliações desde "2012-01-01T00:00:00Z" ou uma data anterior

db.restaurants.find({ "grades.date": { $lt: ISODate("2012-01-01T00:00:00Z") } }, { nome: 1, localidade: 1 })







