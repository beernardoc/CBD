// 1- Encontre todos os atores que dirigiram um filme em que também atuaram e apresente o nome do ator e o título do filme.

MATCH (ator:Person)-[:DIRECTED]->(filme:Movie)<-[:ACTED_IN]-(ator)
RETURN ator.name AS Nome, filme.title AS Titulo



// 2 - Para cada filme realizado depois de 2005, apresente os nomes de todos os atores que atuaram nesse filme.

MATCH (ator:Person)-[:ACTED_IN]->(filme:Movie)
WHERE filme.released > 2005
RETURN filme.title AS TituloDoFilme, COLLECT(ator.name) AS NomesDosAtores


// 3 - Encontre pares de nós com mais do que uma relação entre si.

MATCH (a)-[r]->(b)
WITH a, b, COUNT(r) AS numRelacoes
WHERE numRelacoes > 1
RETURN a, b, numRelacoes



// 4 - Encontre todos os pares de pessoas que fizeram revisões do mesmo filme. Apresente os seus nomes e título de cada filme.

MATCH (p1:Person)-[:REVIEWED]->(filme:Movie)<-[:REVIEWED]-(p2:Person)
WHERE ID(p1) < ID(p2)
RETURN p1.name AS NomePessoa1, p2.name AS NomePessoa2, filme.title AS TituloDoFilme



// 5 - Encontre todos os pares de atores que atuaram em vários filmes juntos.

MATCH (ator1:Person)-[:ACTED_IN]->(filme)<-[:ACTED_IN]-(ator2:Person)
WHERE ID(ator1) < ID(ator2)
WITH ator1, ator2, COLLECT(filme) AS filmesEmComum
WHERE SIZE(filmesEmComum) > 1
RETURN ator1.name AS Nome1, ator2.name AS Nome2, filmesEmComum



// 6 - Determine a idade média do elenco do filme "Apollo 13" no ano do lançamento do filme.

MATCH (ator:Person)-[:ACTED_IN]->(filme:Movie) 
WHERE filme.title = "Apollo 13" 
RETURN COLLECT(ator.name) AS NomesDosAtores, ROUND(AVG(filme.released - ator.born)) AS IdadeMediaDoElenco


// 7 - Encontre os 10 filmes com o elenco mais velho no momento do lançamento do filme. Apresente o filme e a idade média arredondada a 2 casas decimais, por ordem decrescente.

MATCH (filme:Movie)<-[:ACTED_IN]-(ator:Person)
WITH filme, AVG(filme.released - ator.born) AS idadeMedia
RETURN filme.title AS TituloDoFilme, ROUND(idadeMedia, 2) AS IdadeMediaArredondada
ORDER BY idadeMedia DESC
LIMIT 10


// 8 - Apresente o subgrafo ACTED_IN do filme com o elenco mais novo, no momento do lançamento do filme.

MATCH (filme:Movie)<-[:ACTED_IN]-(ator:Person)
WITH filme, AVG(filme.released - ator.born) AS idadeMedia
ORDER BY idadeMedia ASC
LIMIT 1
MATCH caminho = (filme)<-[:ACTED_IN]-(ator:Person)
RETURN caminho


// 9 - Qual é o caminho mais curto (usando qualquer tipo de relação) entre John Cusack e Demi Moore?

MATCH caminhoMaisCurto = shortestPath((john:Person {name: "John Cusack"})-[*]-(demi:Person {name: "Demi Moore"}))
RETURN caminhoMaisCurto


// 10 - Qual a dimensão caminho mais curto (usando qualquer tipo de relação) entre Keanu Reeves e Tom Cruise?

MATCH caminhoMaisCurto = shortestPath((keanu:Person {name: "Keanu Reeves"})-[*]-(tom:Person {name: "Tom Cruise"}))
RETURN length(caminhoMaisCurto) AS DimensaoDoCaminhoMaisCurto



// 11 - Quais são as dimensões do caminho mais curto entre pessoas com nome Jim e pessoas com nome Kevin?

MATCH short_path = shortestPath((jim:Person)-[*]-(kevin:Person))
WHERE jim.name STARTS WITH "Jim" AND kevin.name STARTS WITH "Kevin"
RETURN DISTINCT length(short_path) AS DimensaoDoCaminhoMaisCurto




// 12 - Que pessoas têm uma distância 2 para Jim Cash (a distância entre duas pessoas é o comprimento do caminho mais curto entre eles)?

MATCH (jim:Person {name: "Jim Cash"})-[*2]-(outraPessoa:Person)
WHERE jim <> outraPessoa
RETURN DISTINCT outraPessoa.name AS NomeDaOutraPessoa


// 13 - Qual é a maior distância de uma pessoa para Kevin Bacon?

MATCH sp = shortestPath((p1:Person)-[*]-(p2:Person {name: 'Kevin Bacon'}))
where id(p1) < id(p2)
with p1, length(sp) as Distance
order by Distance desc
limit 1
return p1.name as Name, Distance


// 14 -  Qual é a maior distância entre duas pessoas?

MATCH sp = shortestPath((p1:Person)-[*]-(p2:Person))
where id(p1) < id(p2)
with p1, p2, length(sp) as length
order by length desc
limit 1
return p1.name as Person1, length as Distance, p2.name as Person2




// 15 - Qual é a distribuição de distâncias em pares (isto é, para a distância 1, 2, 3, ..., quantos pares de pessoas têm essa distância um do outro)?

MATCH short_path = shortestPath((p1:Person)-[*]-(p2:Person))
WHERE id(p1) > id(p2)
WITH p1, short_path, length(short_path) AS distance
ORDER BY distance
RETURN distance, count(distance) AS num_pares



// 16 - Indique as 10 pessoas com menor distância média em que o caminho entre elas são relações do tipo ACTED_IN.

MATCH caminho = shortestPath((n1:Person)-[:ACTED_IN*]-(n2:Person))
WHERE n1 <> n2
WITH n1, n2, AVG(length(caminho)) AS Media
RETURN n1.name AS Pessoa1, n2.name AS Pessoa2, Media
ORDER BY Media ASC
LIMIT 10



// 17 - Apresente os atores que tiveram pelo menos uma role para personagens com o prefixo 'Dr.'. O resultado deve ser uma lista com o par “Ator, Lista das roles”.

MATCH (ator:Person)-[personagem:ACTED_IN]->(filme:Movie)
WHERE ANY(role IN personagem.roles WHERE role STARTS WITH 'Dr.')
RETURN ator.name AS Ator, COLLECT(DISTINCT personagem.roles) AS ListaDeRoles



// 18 - Indicar 3 maiores distâncias entre 2 filmes

MATCH sp = shortestPath((m1:Movie)-[*]-(m2:Movie))
WHERE id(m1) < id(m2)
WITH m1, m2, length(sp) as length
ORDER BY length desc
LIMIT 3
RETURN m1.title as Title1, length as Distance, m2.title as Title2 


// 19 - Indicar todas as pessoas que se chamam 'James'

match  (p:Person)-[*]->(m:Movie)
where p.name contains "James"
return distinct(p.name) as Name




// 20 - Listar todas as pessoas que fizeram uma review a filmes e quantas reviews fizeram para cada filme 

match (p:Person)-[:REVIEWED]->(m:Movie)
return m.title as movie, count(p) as num_reviews, collect(p.name) as reviewers



